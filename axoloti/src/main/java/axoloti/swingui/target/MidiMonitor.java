package axoloti.swingui.target;

import axoloti.target.TargetModel;
import axoloti.target.midimonitor.MidiMessage;
import axoloti.target.midimonitor.MidiMonitorData;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author jtaelman
 */
public class MidiMonitor extends TJFrame {

    private Runnable poller;

    /**
     * Creates new form Memory
     */
    public MidiMonitor(TargetModel targetModel) {
        super(targetModel);
        initComponents();
        initComponents2();
    }

    private void initComponents2() {
        setTitle("MIDI input monitor");
        jMidiMonitorTable.setFont(Font.getFont(Font.MONOSPACED));
        //jTextAreaMemoryContent.setEditable(false);

        jMidiMonitorTable.setModel(new AbstractTableModel() {
            private final String[] columnNames = {"Port", "Channel", "Data (hex)", "Event"};

            @Override
            public int getRowCount() {
                MidiMonitorData mmd = getMidiMonitorData();
                if (mmd == null) {
                    return 0;
                }
                if (mmd.msgs == null) {
                    return 0;
                }
                return mmd.msgs.length;
                //return 8;
            }

            @Override
            public int getColumnCount() {
                return columnNames.length;
            }

            @Override
            public String getColumnName(int column) {
                return columnNames[column];
            }

            @Override
            public Object getValueAt(int row, int column) {
                MidiMonitorData mmd = getMidiMonitorData();
                if (mmd.msgs == null) {
                    return null;
                }
                int index = (mmd.readIndex - row) & (mmd.msgs.length - 1);
                MidiMessage msg = mmd.msgs[index];
                if (msg.getPh() == 0 && msg.getB0() == 0) {
                    return ""; // uninitialized
                }
                switch (column) {
                    case 0: //portnumber
                        return String.format("%2d", msg.getPortNumber() + 1);
                    case 1: // channel
                        if (msg.getCin() == 0xF) {
                            return "";
                        }
                        if ((msg.getPh() & 0x08) == 0x08) {
                            return String.format("%2d", msg.getChannelNumber() + 1);
                        } else {
                            return "";
                        }
                    case 2: // data
                        switch (msg.getNumDataBytes()) {
                            case 0:
                                return "";
                            case 1:
                                return String.format("%02X", msg.getB0());
                            case 2:
                                return String.format("%02X %02X", msg.getB0(), msg.getB1());
                            case 3:
                                return String.format("%02X %02X %02X", msg.getB0(), msg.getB1(), msg.getB2());
                        }
                        return "???";
                    case 3:
                        return msg.getEventName();
                }
                return "?";
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }

            @Override
            public Class getColumnClass(int column) {
                return String.class;
            }
        });
        jMidiMonitorTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

        jMidiMonitorTable.getColumnModel().getColumn(0).setMinWidth(40);
        jMidiMonitorTable.getColumnModel().getColumn(1).setMinWidth(40);
        jMidiMonitorTable.getColumnModel().getColumn(2).setMinWidth(80);
        jMidiMonitorTable.getColumnModel().getColumn(3).setMinWidth(160);
        jMidiMonitorTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        jMidiMonitorTable.getColumnModel().getColumn(1).setPreferredWidth(40);
        jMidiMonitorTable.getColumnModel().getColumn(2).setPreferredWidth(80);
        jMidiMonitorTable.getColumnModel().getColumn(3).setPreferredWidth(320);
        jMidiMonitorTable.setFont(new Font("monospaced", Font.PLAIN, 12));
        doLayout();

        poller = () -> {
            refresh();
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jUpdatePanel = new javax.swing.JPanel();
        jButtonUpdate = new javax.swing.JButton();
        jCheckBoxPoll = new javax.swing.JCheckBox();
        jScrollPane = new javax.swing.JScrollPane();
        jMidiMonitorTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jUpdatePanel.setPreferredSize(new java.awt.Dimension(20, 20));

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jCheckBoxPoll.setText("Poll Continuously");
        jCheckBoxPoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPollActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jUpdatePanelLayout = new javax.swing.GroupLayout(jUpdatePanel);
        jUpdatePanel.setLayout(jUpdatePanelLayout);
        jUpdatePanelLayout.setHorizontalGroup(
            jUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jUpdatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxPoll)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jUpdatePanelLayout.setVerticalGroup(
            jUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jUpdatePanelLayout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addGroup(jUpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUpdate)
                    .addComponent(jCheckBoxPoll)))
        );

        jMidiMonitorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane.setViewportView(jMidiMonitorTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jUpdatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
            .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jUpdatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt) {
        if (TargetModel.CONNECTION.is(evt)) {
            showConnect1(evt.getNewValue() != null);
        } else if (TargetModel.MIDIMONITOR.is(evt)) {
            ((AbstractTableModel) jMidiMonitorTable.getModel()).fireTableDataChanged();
        }
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        dispose();
    }//GEN-LAST:event_formWindowClosed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        refresh();
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jCheckBoxPollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPollActionPerformed
        setPolling(jCheckBoxPoll.isSelected());
    }//GEN-LAST:event_jCheckBoxPollActionPerformed

    void showConnect1(boolean connected) {
        jMidiMonitorTable.setEnabled(connected);
        jButtonUpdate.setEnabled(connected);
    }

    MidiMonitorData getMidiMonitorData() {
        return getDModel().getMidiMonitor();
    }

    void setPolling(boolean b) {
        if (b) {
            TargetModel.getTargetModel().addPoller(poller);
        } else {
            TargetModel.getTargetModel().removePoller(poller);
        }
    }

    void refresh() {
        MidiMonitorData.refresh(getDModel().getConnection());
    }

    @Override
    public void dispose() {
        super.dispose();
        setPolling(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JCheckBox jCheckBoxPoll;
    private javax.swing.JTable jMidiMonitorTable;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPanel jUpdatePanel;
    // End of variables declaration//GEN-END:variables

}
